#!/bin/bash
usage() {
    if [[ -n "$1" ]]; then
        echo $1
    fi
    echo $(basename $0) DIR [-s SOURCE_REMOTE] [-d DEST_REMOTE]
    echo Sync one remote to another using a local mirror.
}

help() {
    usage
    echo "DIR: directory holding git repo(s) to sync. Default is current directory."
    echo "-s SOURCE_REMOTE: remote to sync from. default to 'origin'"
    echo "-d DEST_REMOTE: remote to sync to. defaults to 'mirror'"
    echo
    echo "ENVIRONMENT"
    echo "    SOURCE_REMOTE and DEST_REMOTE can be given via env. -s and -d take precedence."
    echo
    echo "SETUP"
    echo "    Underneath the DIR clone and configure any number of folders and repos:"
    echo "    e.g."
    echo "        cd $DIR/somefolder/anotherfolder"
    echo "        git clone --mirror <SOURCE_REPO_URL>"
    echo "        git remote add 'mirror' <DEST_REPO_URL>"
    echo
    echo "REQUIREMENTS:"
    echo "    Credentials for 'origin' and 'mirror' remotes must be configured."
    echo
    echo "LIMITATIONS:"
    echo "    Local git repos in subdirectories DIR must be named with .git suffix (e.g. myrepo.git)"
    echo
    echo "    If the result of 'git clone' results in a directory named differently, change the directory"
    echo "    name to end with git."
    echo
    echo "    Git submodules the submodules must be mirrored independently."
    echo
    echo "PLATFORM:"
    echo "    UNIX flavors"
}

get_parm() {
    # function to process positional parameters.
    #   required: ${parms} array of positional parameters...
    #   required: usage() function which prints given text
    #   reserved: ${__pos}

    __pos=${__pos:-1}                 # initialize position counter

    if [[ $__pos -gt  ${#parm[*]} ]]; then
        usage "too many parameters";
        exit 2
    fi

    eval ${parm[$(($__pos-1))]}=$1;   # capture positional parameter

    __pos=$(($__pos + 1))             # move to next position

    pos_ok=false;                     # check for completion
    if [[ $__pos -eq $((${#parm[*]}+1)) ]]; then
        pos_ok=true;
    fi
}

do_sync() {
    local DIR=$1
    local SOURCE_REMOTE=$2
    local DEST_REMOTE=$3
    echo "Syncing $DIR from '$SOURCE_REMOTE' to '$DEST_REMOTE'."
    git --git-dir $DIR remote update $SOURCE_REMOTE && git --git-dir $DIR push --mirror $DEST_REMOTE && SYNC_COUNT=$((SYNC_COUNT+1))
    return $?
}

parm=(DIR) # list of parameters

SOURCE_REMOTE=${SOURCE_REMOTE:-origin}
DEST_REMOTE=${DEST_REMOTE:-mirror}

DIR=.

# process command line...
while [[ $# -ne 0 ]]; do
    case "$1" in
        -s) SOURCE_REMOTE=$2; shift; shift;;
        -d) DEST_REMOTE=$2;   shift; shift;;
        -h) help; exit 0;;
        -*) usage "unknown option $1"; exit 2;;
        *)  get_parm $1; shift;;
    esac
done

SYNC_COUNT=0
if (cd $DIR; git rev-parse --git-dir 2>&1 >/dev/null); then
    do_sync $(git rev-parse --git-dir) "$SOURCE_REMOTE" "$DEST_REMOTE"
    SYNC_COUNT=1
else
    LIST=$(find $DIR -name *.git -type d)
    for FILE in $LIST; do
        do_sync $FILE "$SOURCE_REMOTE" "$DEST_REMOTE"
    done
fi
case $SYNC_COUNT in
   0) echo No repos found.; exit 1 ;;
   1) ;;
   *) echo $SYNC_COUNT repos synced ;;
esac
